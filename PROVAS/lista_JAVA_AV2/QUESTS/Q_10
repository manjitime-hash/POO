import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

/**
 * CLASSE ABSTRATA FUNCIONARIO
 * Classe base que define a estrutura comum para todos os funcionários
 */
abstract class Funcionario {
    // ATRIBUTOS PRIVADOS
    private String nome;
    private double salario;
    
    // CONSTRUTOR
    public Funcionario(String nome, double salario) {
        this.nome = nome;
        this.salario = salario;
    }
    
    // CONSTRUTOR VAZIO (para facilitar criação via usuário)
    public Funcionario() {}
    
    // a) MÉTODOS DE ACESSO (GETTERS/SETTERS)
    public String getNome() {
        return nome;
    }
    
    public void setNome(String nome) {
        this.nome = nome;
    }
    
    public double getSalario() {
        return salario;
    }
    
    public void setSalario(double salario) {
        this.salario = salario;
    }
    
    // b) MÉTODO ABSTRATO calcularBonus()
    /**
     * Método abstrato que deve ser implementado por cada subclasse
     * para calcular o bônus específico do cargo
     */
    public abstract double calcularBonus();
    
    /**
     * Método concreto que usa o método abstrato - demonstra polimorfismo
     */
    public void exibirInformacoes() {
        double bonus = calcularBonus();
        double salarioTotal = salario + bonus;
        
        System.out.println("Nome: " + nome);
        System.out.println("Cargo: " + getCargo());
        System.out.println("Salário Base: R$ " + String.format("%.2f", salario));
        System.out.println("Bônus: R$ " + String.format("%.2f", bonus));
        System.out.println("Salário Total: R$ " + String.format("%.2f", salarioTotal));
        System.out.println("------------------------");
    }
    
    /**
     * Método abstrato para retornar o cargo específico
     */
    public abstract String getCargo();
}

/**
 * SUBCLASSE GERENTE - Item c(i)
 * Herda de Funcionario e implementa bônus de 20%
 */
class Gerente extends Funcionario {
    private String departamento;
    
    // CONSTRUTOR
    public Gerente(String nome, double salario, String departamento) {
        super(nome, salario);
        this.departamento = departamento;
    }
    
    // CONSTRUTOR VAZIO
    public Gerente() {}
    
    // GETTER E SETTER ESPECÍFICO
    public String getDepartamento() {
        return departamento;
    }
    
    public void setDepartamento(String departamento) {
        this.departamento = departamento;
    }
    
    // IMPLEMENTAÇÃO DO MÉTODO ABSTRATO calcularBonus()
    @Override
    public double calcularBonus() {
        // Gerente recebe 20% de bônus sobre o salário
        return getSalario() * 0.20;
    }
    
    // IMPLEMENTAÇÃO DO MÉTODO ABSTRATO getCargo()
    @Override
    public String getCargo() {
        return "Gerente";
    }
    
    // SOBRESCRITA DO MÉTODO exibirInformacoes() PARA ADICIONAR INFORMAÇÕES ESPECÍFICAS
    @Override
    public void exibirInformacoes() {
        super.exibirInformacoes();
        System.out.println("Departamento: " + departamento);
        System.out.println("------------------------");
    }
}

/**
 * SUBCLASSE DESENVOLVEDOR - Item c(ii)
 * Herda de Funcionario e implementa bônus de 10%
 */
class Desenvolvedor extends Funcionario {
    private String linguagem;
    private int nivel; // 1-Júnior, 2-Pleno, 3-Sênior
    
    // CONSTRUTOR
    public Desenvolvedor(String nome, double salario, String linguagem, int nivel) {
        super(nome, salario);
        this.linguagem = linguagem;
        this.nivel = nivel;
    }
    
    // CONSTRUTOR VAZIO
    public Desenvolvedor() {}
    
    // GETTERS E SETTERS ESPECÍFICOS
    public String getLinguagem() {
        return linguagem;
    }
    
    public void setLinguagem(String linguagem) {
        this.linguagem = linguagem;
    }
    
    public int getNivel() {
        return nivel;
    }
    
    public void setNivel(int nivel) {
        this.nivel = nivel;
    }
    
    // RETORNA A DESCRIÇÃO DO NÍVEL
    public String getNivelDescricao() {
        switch (nivel) {
            case 1: return "Júnior";
            case 2: return "Pleno";
            case 3: return "Sênior";
            default: return "Indefinido";
        }
    }
    
    // IMPLEMENTAÇÃO DO MÉTODO ABSTRATO calcularBonus()
    @Override
    public double calcularBonus() {
        // Desenvolvedor recebe 10% de bônus sobre o salário
        double bonusBase = getSalario() * 0.10;
        
        // Desenvolvedores sênior recebem bônus adicional de 5%
        if (nivel == 3) {
            bonusBase += getSalario() * 0.05;
        }
        
        return bonusBase;
    }
    
    // IMPLEMENTAÇÃO DO MÉTODO ABSTRATO getCargo()
    @Override
    public String getCargo() {
        return "Desenvolvedor " + getNivelDescricao();
    }
    
    // SOBRESCRITA DO MÉTODO exibirInformacoes() PARA ADICIONAR INFORMAÇÕES ESPECÍFICAS
    @Override
    public void exibirInformacoes() {
        super.exibirInformacoes();
        System.out.println("Linguagem: " + linguagem);
        System.out.println("Nível: " + getNivelDescricao());
        System.out.println("------------------------");
    }
}

/**
 * CLASSE SISTEMA RH
 * Gerencia a lista de funcionários e operações do sistema
 */
class SistemaRH {
    private List<Funcionario> funcionarios;
    
    public SistemaRH() {
        this.funcionarios = new ArrayList<>();
    }
    
    /**
     * Adiciona um funcionário à lista (POLIMORFISMO)
     * Aceita qualquer subclasse de Funcionario
     */
    public void adicionarFuncionario(Funcionario funcionario) {
        funcionarios.add(funcionario);
        System.out.println("Funcionário adicionado: " + funcionario.getNome() + " - " + funcionario.getCargo());
    }
    
    /**
     * d) Exibe o bônus de cada funcionário (DEMONSTRA POLIMORFISMO)
     * O mesmo método funciona para diferentes tipos de funcionários
     */
    public void exibirBonusTodos() {
        System.out.println("\n=== BÔNUS DE TODOS OS FUNCIONÁRIOS ===");
        
        if (funcionarios.isEmpty()) {
            System.out.println("Nenhum funcionário cadastrado.");
            return;
        }
        
        for (Funcionario funcionario : funcionarios) {
            double bonus = funcionario.calcularBonus(); // POLIMORFISMO: comportamento diferente para cada tipo
            System.out.printf("%s (%s): R$ %.2f\n", 
                funcionario.getNome(), 
                funcionario.getCargo(), 
                bonus);
        }
    }
    
    /**
     * Exibe informações completas de todos os funcionários
     */
    public void exibirInformacoesCompletas() {
        System.out.println("\n=== INFORMAÇÕES COMPLETAS DOS FUNCIONÁRIOS ===");
        
        if (funcionarios.isEmpty()) {
            System.out.println("Nenhum funcionário cadastrado.");
            return;
        }
        
        for (Funcionario funcionario : funcionarios) {
            funcionario.exibirInformacoes(); // POLIMORFISMO: exibe informações específicas de cada tipo
        }
    }
    
    /**
     * Calcula o total de bônus a ser pago
     */
    public double calcularTotalBonus() {
        double total = 0;
        for (Funcionario funcionario : funcionarios) {
            total += funcionario.calcularBonus(); // POLIMORFISMO
        }
        return total;
    }
    
    /**
     * Calcula a folha de pagamento total (salários + bônus)
     */
    public double calcularFolhaPagamento() {
        double total = 0;
        for (Funcionario funcionario : funcionarios) {
            total += funcionario.getSalario() + funcionario.calcularBonus(); // POLIMORFISMO
        }
        return total;
    }
    
    /**
     * Lista funcionários por cargo
     */
    public void listarPorCargo(String cargo) {
        System.out.println("\n=== " + cargo.toUpperCase() + "S ===");
        boolean encontrou = false;
        
        for (Funcionario funcionario : funcionarios) {
            if (funcionario.getCargo().toLowerCase().contains(cargo.toLowerCase())) {
                funcionario.exibirInformacoes();
                encontrou = true;
            }
        }
        
        if (!encontrou) {
            System.out.println("Nenhum " + cargo.toLowerCase() + " encontrado.");
        }
    }
    
    // GETTER para a lista de funcionários
    public List<Funcionario> getFuncionarios() {
        return funcionarios;
    }
}

/**
 * CLASSE PRINCIPAL MAIN
 */
public class Main {
    private static Scanner scanner = new Scanner(System.in);
    private static SistemaRH sistemaRH = new SistemaRH();
    
    public static void main(String[] args) {
        System.out.println("=== SISTEMA DE RH - CÁLCULO DE BÔNUS ===");
        
        // Adiciona alguns funcionários de exemplo
        adicionarFuncionariosExemplo();
        
        int opcao;
        do {
            exibirMenu();
            opcao = lerInteiro("Escolha uma opção: ");
            
            switch (opcao) {
                case 1:
                    cadastrarGerente();
                    break;
                case 2:
                    cadastrarDesenvolvedor();
                    break;
                case 3:
                    sistemaRH.exibirBonusTodos();
                    break;
                case 4:
                    sistemaRH.exibirInformacoesCompletas();
                    break;
                case 5:
                    exibirEstatisticas();
                    break;
                case 6:
                    sistemaRH.listarPorCargo("gerente");
                    break;
                case 7:
                    sistemaRH.listarPorCargo("desenvolvedor");
                    break;
                case 0:
                    System.out.println("Saindo do sistema...");
                    break;
                default:
                    System.out.println("Opção inválida!");
            }
        } while (opcao != 0);
        
        scanner.close();
    }
    
    /**
     * Adiciona alguns funcionários de exemplo para demonstração
     */
    private static void adicionarFuncionariosExemplo() {
        // POLIMORFISMO: podemos tratar Gerente e Desenvolvedor como Funcionario
        Funcionario gerente1 = new Gerente("João Silva", 8000.0, "Vendas");
        Funcionario gerente2 = new Gerente("Maria Santos", 9500.0, "TI");
        Funcionario dev1 = new Desenvolvedor("Pedro Costa", 5000.0, "Java", 2);
        Funcionario dev2 = new Desenvolvedor("Ana Oliveira", 7000.0, "Python", 3);
        Funcionario dev3 = new Desenvolvedor("Carlos Lima", 3000.0, "JavaScript", 1);
        
        sistemaRH.adicionarFuncionario(gerente1);
        sistemaRH.adicionarFuncionario(gerente2);
        sistemaRH.adicionarFuncionario(dev1);
        sistemaRH.adicionarFuncionario(dev2);
        sistemaRH.adicionarFuncionario(dev3);
    }
    
    private static void exibirMenu() {
        System.out.println("\n=== MENU PRINCIPAL ===");
        System.out.println("1. Cadastrar Gerente");
        System.out.println("2. Cadastrar Desenvolvedor");
        System.out.println("3. Exibir Bônus de Todos");
        System.out.println("4. Exibir Informações Completas");
        System.out.println("5. Estatísticas da Empresa");
        System.out.println("6. Listar Gerentes");
        System.out.println("7. Listar Desenvolvedores");
        System.out.println("0. Sair");
    }
    
    private static void cadastrarGerente() {
        System.out.println("\n--- CADASTRAR GERENTE ---");
        Gerente gerente = new Gerente();
        
        System.out.print("Nome: ");
        gerente.setNome(scanner.nextLine());
        
        System.out.print("Salário: R$ ");
        gerente.setSalario(scanner.nextDouble());
        scanner.nextLine(); // Limpar buffer
        
        System.out.print("Departamento: ");
        gerente.setDepartamento(scanner.nextLine());
        
        sistemaRH.adicionarFuncionario(gerente);
    }
    
    private static void cadastrarDesenvolvedor() {
        System.out.println("\n--- CADASTRAR DESENVOLVEDOR ---");
        Desenvolvedor dev = new Desenvolvedor();
        
        System.out.print("Nome: ");
        dev.setNome(scanner.nextLine());
        
        System.out.print("Salário: R$ ");
        dev.setSalario(scanner.nextDouble());
        scanner.nextLine(); // Limpar buffer
        
        System.out.print("Linguagem de programação: ");
        dev.setLinguagem(scanner.nextLine());
        
        System.out.print("Nível (1-Júnior, 2-Pleno, 3-Sênior): ");
        dev.setNivel(scanner.nextInt());
        scanner.nextLine(); // Limpar buffer
        
        sistemaRH.adicionarFuncionario(dev);
    }
    
    private static void exibirEstatisticas() {
        System.out.println("\n=== ESTATÍSTICAS DA EMPRESA ===");
        
        int totalFuncionarios = sistemaRH.getFuncionarios().size();
        int totalGerentes = 0;
        int totalDesenvolvedores = 0;
        double totalSalarios = 0;
        
        for (Funcionario func : sistemaRH.getFuncionarios()) {
            totalSalarios += func.getSalario();
            if (func instanceof Gerente) {
                totalGerentes++;
            } else if (func instanceof Desenvolvedor) {
                totalDesenvolvedores++;
            }
        }
        
        double totalBonus = sistemaRH.calcularTotalBonus();
        double folhaPagamento = sistemaRH.calcularFolhaPagamento();
        
        System.out.println("Total de funcionários: " + totalFuncionarios);
        System.out.println("Total de gerentes: " + totalGerentes);
        System.out.println("Total de desenvolvedores: " + totalDesenvolvedores);
        System.out.printf("Total de salários: R$ %.2f\n", totalSalarios);
        System.out.printf("Total de bônus: R$ %.2f\n", totalBonus);
        System.out.printf("Folha de pagamento total: R$ %.2f\n", folhaPagamento);
        
        if (totalFuncionarios > 0) {
            System.out.printf("Bônus médio por funcionário: R$ %.2f\n", totalBonus / totalFuncionarios);
            System.out.printf("Salário médio: R$ %.2f\n", totalSalarios / totalFuncionarios);
        }
    }
    
    private static int lerInteiro(String mensagem) {
        while (true) {
            try {
                System.out.print(mensagem);
                return Integer.parseInt(scanner.nextLine());
            } catch (NumberFormatException e) {
                System.out.println("Por favor, digite um número válido.");
            }
        }
    }
}
