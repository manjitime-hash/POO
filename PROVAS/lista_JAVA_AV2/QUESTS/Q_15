import java.util.HashSet;
import java.util.Scanner;
import java.util.Iterator;

class GerenciadorUsuarios {
    private HashSet<String> usuarios = new HashSet<>();
    
    // a) M√©todo para adicionar usu√°rios
    public boolean adicionarUsuario(String nomeUsuario) {
        // HashSet N√ÉO permite duplicatas - retorna false se j√° existir
        boolean adicionado = usuarios.add(nomeUsuario);
        
        if (adicionado) {
            System.out.println("‚úÖ Usu√°rio '" + nomeUsuario + "' cadastrado com sucesso!");
        } else {
            System.out.println("‚ùå Usu√°rio '" + nomeUsuario + "' j√° existe! Duplicata n√£o permitida.");
        }
        return adicionado;
    }
    
    // a) M√©todo para remover usu√°rios
    public boolean removerUsuario(String nomeUsuario) {
        boolean removido = usuarios.remove(nomeUsuario);
        
        if (removido) {
            System.out.println("üóëÔ∏è Usu√°rio '" + nomeUsuario + "' removido com sucesso!");
        } else {
            System.out.println("‚ö†Ô∏è Usu√°rio '" + nomeUsuario + "' n√£o encontrado!");
        }
        return removido;
    }
    
    // b) M√©todo que exiba todos os usu√°rios cadastrados
    public void exibirTodosUsuarios() {
        if (usuarios.isEmpty()) {
            System.out.println("üì≠ Nenhum usu√°rio cadastrado no sistema.");
            return;
        }
        
        System.out.println("\n=== USU√ÅRIOS CADASTRADOS ===");
        System.out.println("Total de usu√°rios √∫nicos: " + usuarios.size());
        
        // Usando Iterator para percorrer o HashSet
        Iterator<String> iterator = usuarios.iterator();
        int contador = 1;
        
        while (iterator.hasNext()) {
            System.out.println(contador + ". " + iterator.next());
            contador++;
        }
        System.out.println("============================\n");
    }
    
    // M√©todo auxiliar para verificar se usu√°rio existe
    public boolean usuarioExiste(String nomeUsuario) {
        return usuarios.contains(nomeUsuario);
    }
    
    // M√©todo para obter quantidade de usu√°rios
    public int getQuantidadeUsuarios() {
        return usuarios.size();
    }
    
    // c) M√©todo para testar comportamento de n√£o duplica√ß√£o
    public void testarNaoDuplicacao() {
        System.out.println("\nüß™ TESTE DE N√ÉO DUPLICA√á√ÉO");
        
        if (usuarios.isEmpty()) {
            System.out.println("Adicione alguns usu√°rios primeiro para testar.");
            return;
        }
        
        // Pega o primeiro usu√°rio para testar duplicata
        String primeiroUsuario = usuarios.iterator().next();
        
        System.out.println("Tentando adicionar duplicata: '" + primeiroUsuario + "'");
        System.out.println("Quantidade antes: " + usuarios.size());
        
        boolean resultado = adicionarUsuario(primeiroUsuario);
        
        System.out.println("Quantidade depois: " + usuarios.size());
        System.out.println("Resultado: " + (resultado ? "Adicionado" : "Rejeitado (comportamento correto)"));
    }
    
    public static void limparTela() {
        try {
            if (System.getProperty("os.name").contains("Windows")) {
                new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
            } else {
                System.out.print("\033[H\033[2J");
                System.out.flush();
            }
        } catch (Exception e) {
            for (int i = 0; i < 20; i++) {
                System.out.println();
            }
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        GerenciadorUsuarios gerenciador = new GerenciadorUsuarios();
        
        while (true) {
            exibirMenuPrincipal();
            System.out.print("Op√ß√£o: ");
            
            int opcao = scanner.nextInt();
            scanner.nextLine(); // Limpar buffer
            
            switch (opcao) {
                case 1:
                    adicionarUsuarioInterface(scanner, gerenciador);
                    break;
                    
                case 2:
                    removerUsuarioInterface(scanner, gerenciador);
                    break;
                    
                case 3:
                    GerenciadorUsuarios.limparTela();
                    gerenciador.exibirTodosUsuarios();
                    pausar(scanner);
                    break;
                    
                case 4:
                    GerenciadorUsuarios.limparTela();
                    gerenciador.testarNaoDuplicacao();
                    pausar(scanner);
                    break;
                    
                case 5:
                    testarComportamentoHashSet();
                    pausar(scanner);
                    break;
                    
                case 6:
                    System.out.println("üëã Saindo do sistema...");
                    scanner.close();
                    return;
                    
                default:
                    System.out.println("‚ùå Op√ß√£o inv√°lida!");
                    pausar(scanner);
            }
        }
    }
    
    public static void exibirMenuPrincipal() {
        GerenciadorUsuarios.limparTela();
        System.out.println("=== üéØ GERENCIADOR DE USU√ÅRIOS ===");
        System.out.println("1 - Adicionar usu√°rio");
        System.out.println("2 - Remover usu√°rio");
        System.out.println("3 - Exibir todos os usu√°rios");
        System.out.println("4 - Testar n√£o duplica√ß√£o");
        System.out.println("5 - Demonstra√ß√£o HashSet");
        System.out.println("6 - Sair");
        System.out.println("=================================");
    }
    
    public static void adicionarUsuarioInterface(Scanner scanner, GerenciadorUsuarios gerenciador) {
        GerenciadorUsuarios.limparTela();
        System.out.println("=== üë§ ADICIONAR USU√ÅRIO ===");
        
        System.out.print("Nome do usu√°rio: ");
        String nome = scanner.nextLine().trim();
        
        if (!nome.isEmpty()) {
            gerenciador.adicionarUsuario(nome);
        } else {
            System.out.println("‚ùå Nome n√£o pode ser vazio!");
        }
        
        pausar(scanner);
    }
    
    public static void removerUsuarioInterface(Scanner scanner, GerenciadorUsuarios gerenciador) {
        GerenciadorUsuarios.limparTela();
        System.out.println("=== üóëÔ∏è REMOVER USU√ÅRIO ===");
        
        System.out.print("Nome do usu√°rio a remover: ");
        String nome = scanner.nextLine().trim();
        
        if (!nome.isEmpty()) {
            gerenciador.removerUsuario(nome);
        } else {
            System.out.println("‚ùå Nome n√£o pode ser vazio!");
        }
        
        pausar(scanner);
    }
    
    // Demonstra√ß√£o do comportamento do HashSet
    public static void testarComportamentoHashSet() {
        GerenciadorUsuarios.limparTela();
        System.out.println("=== üî¨ DEMONSTRA√á√ÉO HASHSET ===");
        
        GerenciadorUsuarios demo = new GerenciadorUsuarios();
        
        System.out.println("\n1. Adicionando usu√°rios √∫nicos:");
        demo.adicionarUsuario("Alice");
        demo.adicionarUsuario("Bob");
        demo.adicionarUsuario("Carlos");
        
        System.out.println("\n2. Tentando adicionar duplicatas:");
        demo.adicionarUsuario("Alice");  // Deve ser rejeitado
        demo.adicionarUsuario("Bob");    // Deve ser rejeitado
        
        System.out.println("\n3. Usu√°rios finais (apenas √∫nicos):");
        demo.exibirTodosUsuarios();
        
        System.out.println("4. Testando case sensitivity:");
        demo.adicionarUsuario("alice");  // Diferente de "Alice"
        demo.adicionarUsuario("ALICE");  // Diferente de "Alice"
        
        System.out.println("\n5. Resultado final:");
        demo.exibirTodosUsuarios();
    }
    
    public static void pausar(Scanner scanner) {
        System.out.println("\n‚èé Pressione Enter para continuar...");
        scanner.nextLine();
    }
}
