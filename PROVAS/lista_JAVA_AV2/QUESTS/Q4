import java.util.InputMismatchException;
import java.util.Scanner;

// üî∑ CLASSE ABSTRATA PARA DEMONSTRAR HERAN√áA E POLIMORFISMO
abstract class Forma {
    protected Ponto2D centro;
    
    public Forma(Ponto2D centro) {
        this.centro = centro;
    }
    
    // üî∑ M√âTODOS ABSTRATOS PARA POLIMORFISMO
    public abstract double area();
    public abstract double perimetro();
    public abstract void mostrarInfo();
    
    // üî∑ M√âTODO CONCRETO COMPARTILHADO
    public void mover(Ponto2D novoCentro) {
        if (novoCentro == null) {
            throw new IllegalArgumentException("Centro n√£o pode ser nulo!");
        }
        this.centro = novoCentro;
    }
    
    public Ponto2D getCentro() {
        return centro;
    }
}

// üî∑ CLASSE CIRCULO COM HERAN√áA
class Circulo extends Forma {
    private double raio;
    
    // üèóÔ∏è CONSTRUTORES
    public Circulo(double raio, Ponto2D centro) {
        super(centro);
        setRaio(raio);
    }
    
    public Circulo(double raio) {
        this(raio, new Ponto2D());
    }
    
    // üîí ENCAPSULAMENTO - Getter/Setter com valida√ß√£o
    public double getRaio() { 
        return raio; 
    }
    
    public void setRaio(double raio) {
        if (raio < 0) {
            throw new IllegalArgumentException("Raio n√£o pode ser negativo!");
        }
        this.raio = raio;
    }
    
    // üî∑ POLIMORFISMO - Implementa√ß√£o dos m√©todos abstratos
    @Override
    public double area() {
        return Math.PI * raio * raio;
    }
    
    @Override
    public double perimetro() {
        return 2 * Math.PI * raio;
    }
    
    @Override
    public void mostrarInfo() {
        System.out.printf("‚óã C√≠rculo: Raio=%.2f, Centro=%s, √Årea=%.2f, Per√≠metro=%.2f%n", 
                         raio, centro, area(), perimetro());
    }
    
    // üìè M√âTODOS ESPEC√çFICOS DA CLASSE
    public void inflar(double quantidade) {
        try {
            setRaio(raio + quantidade);
            System.out.printf("‚úÖ C√≠rculo inflado para raio %.2f%n", raio);
        } catch (IllegalArgumentException e) {
            System.out.println("‚ùå Erro ao inflar: " + e.getMessage());
        }
    }
    
    public void desinflar(double quantidade) {
        try {
            setRaio(Math.max(0, raio - quantidade));
            System.out.printf("‚úÖ C√≠rculo desinflado para raio %.2f%n", raio);
        } catch (IllegalArgumentException e) {
            System.out.println("‚ùå Erro ao desinflar: " + e.getMessage());
        }
    }
    
    @Override
    public String toString() {
        return String.format("C√≠rculo[raio=%.2f, centro=%s]", raio, centro);
    }
}

// üî∑ CLASSE PONTO2D
class Ponto2D {
    private double x, y;
    
    public Ponto2D() { 
        this(0.0, 0.0); 
    }
    
    public Ponto2D(double x, double y) { 
        this.x = x; 
        this.y = y; 
    }
    
    public Ponto2D(Ponto2D outro) { 
        this.x = outro.x; 
        this.y = outro.y; 
    }
    
    // üîí ENCAPSULAMENTO - Getters/Setters
    public double getX() { return x; }
    public double getY() { return y; }
    
    public void setX(double x) { this.x = x; }
    public void setY(double y) { this.y = y; }
    
    public void setCoordenadas(double x, double y) {
        this.x = x;
        this.y = y;
    }
    
    // üî∑ M√âTODOS DE COMPARA√á√ÉO
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Ponto2D ponto = (Ponto2D) obj;
        return Math.abs(x - ponto.x) < 1e-9 && Math.abs(y - ponto.y) < 1e-9;
    }
    
    public double distancia(Ponto2D outro) {
        if (outro == null) {
            throw new IllegalArgumentException("Ponto n√£o pode ser nulo!");
        }
        double dx = x - outro.x, dy = y - outro.y;
        return Math.sqrt(dx * dx + dy * dy);
    }
    
    @Override
    public String toString() { 
        return String.format("(%.2f, %.2f)", x, y); 
    }
}

// üéÆ CLASSE PRINCIPAL COM SISTEMA DE PAUSA
public class Main {
    private static Scanner scanner = new Scanner(System.in);
    
    public static void main(String[] args) {
        limparTerminal();
        System.out.println("üé® SISTEMA DE DESIGN GR√ÅFICO 2D");
        System.out.println("================================\n");
        
        Forma[] formas = new Forma[2];
        
        try {
            formas[0] = new Circulo(5.0, new Ponto2D(1.0, 1.0));
            formas[1] = new Circulo(3.0);
            
            boolean executando = true;
            while (executando) {
                exibirMenu();
                executando = processarOpcao(formas);
                
                // üÜï PAUSA AP√ìS CADA A√á√ÉO (exceto sair e limpar terminal)
                if (executando) {
                    pausarELimpar();
                }
            }
            
        } catch (Exception e) {
            System.out.println("‚ùå Erro cr√≠tico: " + e.getMessage());
            pausarELimpar();
        } finally {
            System.out.println("\nüëã Programa encerrado!");
            scanner.close();
        }
    }
    
    private static void exibirMenu() {
        System.out.println("\n" + "‚ïê".repeat(50));
        System.out.println("1. Criar novo c√≠rculo");
        System.out.println("2. Mostrar informa√ß√µes das formas");
        System.out.println("3. Inflar/Desinflar c√≠rculos");
        System.out.println("4. Mover c√≠rculos");
        System.out.println("5. Demonstrar polimorfismo");
        System.out.println("6. Limpar terminal");
        System.out.println("7. Sair");
        System.out.println("‚ïê".repeat(50));
        System.out.print("Escolha: ");
    }
    
    private static boolean processarOpcao(Forma[] formas) {
        try {
            int opcao = scanner.nextInt();
            
            switch (opcao) {
                case 1:
                    criarCirculo(formas);
                    return true;
                case 2:
                    mostrarFormas(formas);
                    return true;
                case 3:
                    inflarDesinflar(formas);
                    return true;
                case 4:
                    moverFormas(formas);
                    return true;
                case 5:
                    demonstrarPolimorfismo(formas);
                    return true;
                case 6:
                    limparTerminal();
                    return true;
                case 7:
                    return false;
                default:
                    System.out.println("‚ùå Op√ß√£o inv√°lida!");
                    return true;
            }
        } catch (InputMismatchException e) {
            System.out.println("‚ùå Erro: Digite um n√∫mero v√°lido!");
            scanner.nextLine();
            return true;
        }
    }
    
    private static void criarCirculo(Forma[] formas) {
        try {
            System.out.print("Digite o raio do c√≠rculo: ");
            double raio = scanner.nextDouble();
            
            System.out.print("Digite a coordenada X do centro: ");
            double x = scanner.nextDouble();
            System.out.print("Digite a coordenada Y do centro: ");
            double y = scanner.nextDouble();
            
            formas[0] = new Circulo(raio, new Ponto2D(x, y));
            System.out.println("‚úÖ Novo c√≠rculo criado com sucesso!");
            
        } catch (InputMismatchException e) {
            System.out.println("‚ùå Erro: Digite n√∫meros v√°lidos!");
            scanner.nextLine();
        } catch (IllegalArgumentException e) {
            System.out.println("‚ùå Erro: " + e.getMessage());
        }
    }
    
    private static void mostrarFormas(Forma[] formas) {
        System.out.println("\nüìä INFORMA√á√ïES DAS FORMAS:");
        for (int i = 0; i < formas.length; i++) {
            if (formas[i] != null) {
                System.out.print((i + 1) + ". ");
                formas[i].mostrarInfo();
            }
        }
    }
    
    private static void inflarDesinflar(Forma[] formas) {
        try {
            System.out.print("Qual c√≠rculo (1 ou 2)? ");
            int index = scanner.nextInt() - 1;
            
            if (index < 0 || index >= formas.length || formas[index] == null) {
                System.out.println("‚ùå C√≠rculo inv√°lido!");
                return;
            }
            
            System.out.print("1. Inflar\n2. Desinflar\nEscolha: ");
            int acao = scanner.nextInt();
            System.out.print("Quantidade: ");
            double quantidade = scanner.nextDouble();
            
            Circulo circulo = (Circulo) formas[index];
            if (acao == 1) {
                circulo.inflar(quantidade);
            } else if (acao == 2) {
                circulo.desinflar(quantidade);
            } else {
                System.out.println("‚ùå A√ß√£o inv√°lida!");
            }
            
        } catch (InputMismatchException e) {
            System.out.println("‚ùå Erro: Digite n√∫meros v√°lidos!");
            scanner.nextLine();
        } catch (ClassCastException e) {
            System.out.println("‚ùå Erro: Esta forma n√£o √© um c√≠rculo!");
        }
    }
    
    private static void moverFormas(Forma[] formas) {
        try {
            System.out.print("Qual forma mover (1 ou 2)? ");
            int index = scanner.nextInt() - 1;
            
            if (index < 0 || index >= formas.length || formas[index] == null) {
                System.out.println("‚ùå Forma inv√°lida!");
                return;
            }
            
            System.out.print("Novo X: ");
            double x = scanner.nextDouble();
            System.out.print("Novo Y: ");
            double y = scanner.nextDouble();
            
            formas[index].mover(new Ponto2D(x, y));
            System.out.println("‚úÖ Forma movida com sucesso!");
            
        } catch (InputMismatchException e) {
            System.out.println("‚ùå Erro: Digite n√∫meros v√°lidos!");
            scanner.nextLine();
        } catch (IllegalArgumentException e) {
            System.out.println("‚ùå Erro: " + e.getMessage());
        }
    }
    
    private static void demonstrarPolimorfismo(Forma[] formas) {
        System.out.println("\nüé≠ DEMONSTRA√á√ÉO DE POLIMORFISMO");
        System.out.println("Mesma interface, comportamentos espec√≠ficos:\n");
        
        for (Forma forma : formas) {
            if (forma != null) {
                System.out.printf("√Årea: %.2f | ", forma.area());
                System.out.printf("Per√≠metro: %.2f | ", forma.perimetro());
                forma.mostrarInfo();
            }
        }
    }
    
    // üÜï M√âTODO DE PAUSA E LIMPEZA
    private static void pausarELimpar() {
        System.out.println("\n‚è∏Ô∏è  Pressione Enter para continuar...");
        scanner.nextLine(); // Limpa o buffer do nextInt anterior
        scanner.nextLine(); // Espera o Enter do usu√°rio
        limparTerminal();
        
        // üÜï MOSTRA O RESULTADO DA A√á√ÉO NOVAMENTE
        System.out.println("üé® SISTEMA DE DESIGN GR√ÅFICO 2D");
        System.out.println("================================\n");
        System.out.println("‚úÖ A√ß√£o conclu√≠da! Menu principal:");
    }
    
    // üßπ M√âTODO PARA LIMPAR TERMINAL
    public static void limparTerminal() {
        try {
            if (System.getProperty("os.name").contains("Windows")) {
                new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
            } else {
                System.out.print("\033[H\033[2J");
                System.out.flush();
            }
        } catch (Exception e) {
            for (int i = 0; i < 50; i++) {
                System.out.println();
            }
        }
    }
}
