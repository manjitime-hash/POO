import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

/**
 * CLASSE ABSTRATA CONTA BANCARIA
 * Classe base que define a estrutura comum para todas as contas bancárias
 */
abstract class ContaBancaria {
    // ATRIBUTOS PRIVADOS
    private String numero;
    private double saldo;
    private String titular;
    private String agencia;
    
    // CONSTRUTOR
    public ContaBancaria(String numero, double saldo, String titular, String agencia) {
        this.numero = numero;
        this.saldo = saldo;
        this.titular = titular;
        this.agencia = agencia;
    }
    
    // CONSTRUTOR VAZIO
    public ContaBancaria() {}
    
    // a) MÉTODOS DE ACESSO (GETTERS/SETTERS)
    public String getNumero() {
        return numero;
    }
    
    public void setNumero(String numero) {
        this.numero = numero;
    }
    
    public double getSaldo() {
        return saldo;
    }
    
    protected void setSaldo(double saldo) {
        this.saldo = saldo;
    }
    
    public String getTitular() {
        return titular;
    }
    
    public void setTitular(String titular) {
        this.titular = titular;
    }
    
    public String getAgencia() {
        return agencia;
    }
    
    public void setAgencia(String agencia) {
        this.agencia = agencia;
    }
    
    // b) MÉTODOS depositar() e sacar()
    
    /**
     * Realiza um depósito na conta
     * @param valor valor a ser depositado
     * @return true se o depósito foi bem sucedido
     */
    public boolean depositar(double valor) {
        if (valor > 0) {
            saldo += valor;
            System.out.printf("Depósito de R$ %.2f realizado com sucesso!\n", valor);
            return true;
        } else {
            System.out.println("Valor de depósito inválido!");
            return false;
        }
    }
    
    /**
     * Método abstrato para saque - cada tipo de conta implementa sua própria lógica
     * @param valor valor a ser sacado
     * @return true se o saque foi bem sucedido
     */
    public abstract boolean sacar(double valor);
    
    /**
     * Método para transferência entre contas
     * @param valor valor a ser transferido
     * @param contaDestino conta que receberá a transferência
     * @return true se a transferência foi bem sucedida
     */
    public boolean transferir(double valor, ContaBancaria contaDestino) {
        if (this.sacar(valor)) {
            if (contaDestino.depositar(valor)) {
                System.out.printf("Transferência de R$ %.2f para %s realizada!\n", 
                    valor, contaDestino.getTitular());
                return true;
            } else {
                // Se o depósito falhar, devolve o valor
                this.depositar(valor);
                System.out.println("Falha na transferência!");
                return false;
            }
        }
        return false;
    }
    
    // MÉTODOS ABSTRATOS ADICIONAIS
    public abstract String getTipoConta();
    public abstract void aplicarTaxasMensais();
    
    // MÉTODO CONCRETO PARA EXIBIR INFORMAÇÕES
    public void exibirInformacoes() {
        System.out.println("Titular: " + titular);
        System.out.println("Agência: " + agencia);
        System.out.println("Número: " + numero);
        System.out.println("Tipo: " + getTipoConta());
        System.out.printf("Saldo: R$ %.2f\n", saldo);
    }
    
    @Override
    public String toString() {
        return String.format("%s: %s - %s (R$ %.2f)", 
            getTipoConta(), numero, titular, saldo);
    }
}

/**
 * CLASSE CONTA CORRENTE - Item c
 * Herda de ContaBancaria e cobra taxa fixa em cada saque
 */
class ContaCorrente extends ContaBancaria {
    private double taxaSaque;
    private double chequeEspecial;
    private double chequeEspecialUtilizado;
    private int transacoesIsentas;
    
    // CONSTRUTOR
    public ContaCorrente(String numero, double saldo, String titular, String agencia, 
                        double taxaSaque, double chequeEspecial, int transacoesIsentas) {
        super(numero, saldo, titular, agencia);
        this.taxaSaque = taxaSaque;
        this.chequeEspecial = chequeEspecial;
        this.chequeEspecialUtilizado = 0;
        this.transacoesIsentas = transacoesIsentas;
    }
    
    // CONSTRUTOR VAZIO
    public ContaCorrente() {}
    
    // GETTERS E SETTERS ESPECÍFICOS
    public double getTaxaSaque() {
        return taxaSaque;
    }
    
    public void setTaxaSaque(double taxaSaque) {
        this.taxaSaque = taxaSaque;
    }
    
    public double getChequeEspecial() {
        return chequeEspecial;
    }
    
    public void setChequeEspecial(double chequeEspecial) {
        this.chequeEspecial = chequeEspecial;
    }
    
    public double getChequeEspecialUtilizado() {
        return chequeEspecialUtilizado;
    }
    
    public int getTransacoesIsentas() {
        return transacoesIsentas;
    }
    
    public void setTransacoesIsentas(int transacoesIsentas) {
        this.transacoesIsentas = transacoesIsentas;
    }
    
    // IMPLEMENTAÇÃO DO MÉTODO SACAR COM TAXA - Item c
    @Override
    public boolean sacar(double valor) {
        if (valor <= 0) {
            System.out.println("Valor de saque inválido!");
            return false;
        }
        
        double valorTotal = valor;
        
        // Aplica taxa apenas se não houver transações isentas
        if (transacoesIsentas <= 0) {
            valorTotal += taxaSaque;
            System.out.printf("Taxa de saque: R$ %.2f\n", taxaSaque);
        } else {
            transacoesIsentas--;
            System.out.println("Saque isento de taxa! Transações isentas restantes: " + transacoesIsentas);
        }
        
        double saldoDisponivel = getSaldo() + chequeEspecial - chequeEspecialUtilizado;
        
        if (valorTotal <= saldoDisponivel) {
            double novoSaldo = getSaldo() - valor;
            
            if (novoSaldo >= 0) {
                setSaldo(novoSaldo);
            } else {
                // Usa cheque especial
                chequeEspecialUtilizado += Math.abs(novoSaldo);
                setSaldo(0);
                System.out.printf("Cheque especial utilizado: R$ %.2f\n", chequeEspecialUtilizado);
            }
            
            System.out.printf("Saque de R$ %.2f realizado com sucesso!\n", valor);
            return true;
        } else {
            System.out.println("Saldo insuficiente para o saque!");
            System.out.printf("Saldo disponível: R$ %.2f\n", saldoDisponivel);
            return false;
        }
    }
    
    // IMPLEMENTAÇÃO DOS MÉTODOS ABSTRATOS
    @Override
    public String getTipoConta() {
        return "Conta Corrente";
    }
    
    @Override
    public void aplicarTaxasMensais() {
        // Aplica juros sobre o cheque especial utilizado
        if (chequeEspecialUtilizado > 0) {
            double juros = chequeEspecialUtilizado * 0.15; // 15% de juros
            chequeEspecialUtilizado += juros;
            System.out.printf("Juros de cheque especial: R$ %.2f\n", juros);
        }
        
        // Taxa de manutenção mensal
        double taxaManutencao = 20.00;
        if (getSaldo() >= 1000) {
            System.out.println("Taxa de manutenção isenta (saldo acima de R$ 1000,00)");
        } else {
            setSaldo(getSaldo() - taxaManutencao);
            System.out.printf("Taxa de manutenção: R$ %.2f\n", taxaManutencao);
        }
    }
    
    // MÉTODO ESPECÍFICO DA CONTA CORRENTE
    public void pagarChequeEspecial() {
        if (chequeEspecialUtilizado > 0) {
            System.out.printf("Cheque especial a pagar: R$ %.2f\n", chequeEspecialUtilizado);
            System.out.print("Deseja pagar? (1-Sim/0-Não): ");
            Scanner scanner = new Scanner(System.in);
            int opcao = scanner.nextInt();
            
            if (opcao == 1) {
                if (getSaldo() >= chequeEspecialUtilizado) {
                    setSaldo(getSaldo() - chequeEspecialUtilizado);
                    System.out.printf("Cheque especial pago! Novo saldo: R$ %.2f\n", getSaldo());
                    chequeEspecialUtilizado = 0;
                } else {
                    System.out.println("Saldo insuficiente para pagar o cheque especial!");
                }
            }
        } else {
            System.out.println("Não há cheque especial utilizado.");
        }
    }
    
    // SOBRESCRITA DO MÉTODO exibirInformacoes()
    @Override
    public void exibirInformacoes() {
        super.exibirInformacoes();
        System.out.printf("Taxa de saque: R$ %.2f\n", taxaSaque);
        System.out.printf("Cheque especial: R$ %.2f\n", chequeEspecial);
        System.out.printf("Cheque especial utilizado: R$ %.2f\n", chequeEspecialUtilizado);
        System.out.println("Transações isentas restantes: " + transacoesIsentas);
    }
}

/**
 * CLASSE CONTA POUPANÇA - Item d
 * Herda de ContaBancaria e adiciona método renderJuros(double taxa)
 */
class ContaPoupanca extends ContaBancaria {
    private int diaAniversario;
    private double totalJurosRecebidos;
    
    // CONSTRUTOR
    public ContaPoupanca(String numero, double saldo, String titular, String agencia, int diaAniversario) {
        super(numero, saldo, titular, agencia);
        this.diaAniversario = diaAniversario;
        this.totalJurosRecebidos = 0;
    }
    
    // CONSTRUTOR VAZIO
    public ContaPoupanca() {}
    
    // GETTERS E SETTERS ESPECÍFICOS
    public int getDiaAniversario() {
        return diaAniversario;
    }
    
    public void setDiaAniversario(int diaAniversario) {
        this.diaAniversario = diaAniversario;
    }
    
    public double getTotalJurosRecebidos() {
        return totalJurosRecebidos;
    }
    
    // IMPLEMENTAÇÃO DO MÉTODO SACAR (sem taxa para poupança)
    @Override
    public boolean sacar(double valor) {
        if (valor <= 0) {
            System.out.println("Valor de saque inválido!");
            return false;
        }
        
        if (valor <= getSaldo()) {
            setSaldo(getSaldo() - valor);
            System.out.printf("Saque de R$ %.2f realizado com sucesso!\n", valor);
            return true;
        } else {
            System.out.println("Saldo insuficiente para o saque!");
            return false;
        }
    }
    
    // IMPLEMENTAÇÃO DOS MÉTODOS ABSTRATOS
    @Override
    public String getTipoConta() {
        return "Conta Poupança";
    }
    
    @Override
    public void aplicarTaxasMensais() {
        // Conta poupança não tem taxas mensais
        System.out.println("Conta poupança isenta de taxas mensais!");
    }
    
    // d) MÉTODO renderJuros(double taxa)
    public void renderJuros(double taxa) {
        if (taxa <= 0) {
            System.out.println("Taxa de juros inválida!");
            return;
        }
        
        double juros = getSaldo() * (taxa / 100);
        setSaldo(getSaldo() + juros);
        totalJurosRecebidos += juros;
        
        System.out.printf("Juros de %.2f%% aplicados: R$ %.2f\n", taxa, juros);
        System.out.printf("Novo saldo: R$ %.2f\n", getSaldo());
        System.out.printf("Total de juros recebidos: R$ %.2f\n", totalJurosRecebidos);
    }
    
    // MÉTODO ESPECÍFICO DA CONTA POUPANÇA
    public void simularRendimento(double taxa, int meses) {
        System.out.printf("\n--- SIMULAÇÃO DE RENDIMENTO ---\n");
        System.out.printf("Saldo atual: R$ %.2f\n", getSaldo());
        System.out.printf("Taxa mensal: %.2f%%\n", taxa);
        System.out.printf("Período: %d meses\n", meses);
        
        double saldoSimulado = getSaldo();
        System.out.println("\nMês | Saldo Inicial | Juros | Saldo Final");
        System.out.println("----------------------------------------");
        
        for (int i = 1; i <= meses; i++) {
            double juros = saldoSimulado * (taxa / 100);
            double saldoFinal = saldoSimulado + juros;
            
            System.out.printf("%3d | %13.2f | %5.2f | %11.2f\n", 
                i, saldoSimulado, juros, saldoFinal);
            
            saldoSimulado = saldoFinal;
        }
        
        System.out.printf("\nSaldo final projetado: R$ %.2f\n", saldoSimulado);
        System.out.printf("Rendimento total: R$ %.2f\n", saldoSimulado - getSaldo());
    }
    
    // SOBRESCRITA DO MÉTODO exibirInformacoes()
    @Override
    public void exibirInformacoes() {
        super.exibirInformacoes();
        System.out.println("Dia do aniversário: " + diaAniversario);
        System.out.printf("Total de juros recebidos: R$ %.2f\n", totalJurosRecebidos);
    }
}

/**
 * CLASSE BANCO
 * Gerencia as contas bancárias e operações
 */
class Banco {
    private List<ContaBancaria> contas;
    private String nome;
    
    public Banco(String nome) {
        this.nome = nome;
        this.contas = new ArrayList<>();
    }
    
    /**
     * Adiciona uma conta ao banco
     */
    public void adicionarConta(ContaBancaria conta) {
        contas.add(conta);
        System.out.println("Conta adicionada: " + conta.getTitular() + " - " + conta.getTipoConta());
    }
    
    /**
     * Busca uma conta pelo número
     */
    public ContaBancaria buscarConta(String numero) {
        for (ContaBancaria conta : contas) {
            if (conta.getNumero().equals(numero)) {
                return conta;
            }
        }
        return null;
    }
    
    /**
     * Lista todas as contas
     */
    public void listarContas() {
        System.out.println("\n=== CONTAS DO " + nome.toUpperCase() + " ===");
        if (contas.isEmpty()) {
            System.out.println("Nenhuma conta cadastrada.");
            return;
        }
        
        for (int i = 0; i < contas.size(); i++) {
            System.out.println((i + 1) + ". " + contas.get(i));
        }
    }
    
    /**
     * Exibe informações detalhadas de uma conta
     */
    public void exibirInformacoesConta(int index) {
        if (index >= 0 && index < contas.size()) {
            ContaBancaria conta = contas.get(index);
            System.out.println("\n--- INFORMAÇÕES DA CONTA ---");
            conta.exibirInformacoes();
        } else {
            System.out.println("Índice inválido!");
        }
    }
    
    /**
     * Realiza operações em lote (demonstra polimorfismo)
     */
    public void aplicarTaxasMensais() {
        System.out.println("\n=== APLICANDO TAXAS MENSAS ===");
        for (ContaBancaria conta : contas) {
            System.out.println("\n" + conta.getTitular() + " - " + conta.getTipoConta());
            conta.aplicarTaxasMensais();
        }
    }
    
    /**
     * Calcula o patrimônio total do banco
     */
    public double calcularPatrimonioTotal() {
        double total = 0;
        for (ContaBancaria conta : contas) {
            total += conta.getSaldo();
        }
        return total;
    }
    
    /**
     * Estatísticas do banco
     */
    public void exibirEstatisticas() {
        System.out.println("\n=== ESTATÍSTICAS DO " + nome.toUpperCase() + " ===");
        int totalContas = contas.size();
        int contasCorrente = 0;
        int contasPoupanca = 0;
        double patrimonio = calcularPatrimonioTotal();
        
        for (ContaBancaria conta : contas) {
            if (conta instanceof ContaCorrente) {
                contasCorrente++;
            } else if (conta instanceof ContaPoupanca) {
                contasPoupanca++;
            }
        }
        
        System.out.println("Total de contas: " + totalContas);
        System.out.println("Contas Corrente: " + contasCorrente);
        System.out.println("Contas Poupança: " + contasPoupanca);
        System.out.printf("Patrimônio total: R$ %.2f\n", patrimonio);
        
        if (totalContas > 0) {
            System.out.printf("Saldo médio: R$ %.2f\n", patrimonio / totalContas);
        }
    }
    
    // GETTERS
    public List<ContaBancaria> getContas() {
        return contas;
    }
    
    public String getNome() {
        return nome;
    }
}

/**
 * CLASSE PRINCIPAL MAIN
 */
public class Main {
    private static Scanner scanner = new Scanner(System.in);
    private static Banco banco = new Banco("Banco Digital");
    
    public static void main(String[] args) {
        System.out.println("=== SISTEMA BANCÁRIO DIGITAL ===");
        
        // Adiciona algumas contas de exemplo
        adicionarContasExemplo();
        
        int opcao;
        do {
            exibirMenu();
            opcao = lerInteiro("Escolha uma opção: ");
            
            switch (opcao) {
                case 1:
                    cadastrarContaCorrente();
                    break;
                case 2:
                    cadastrarContaPoupanca();
                    break;
                case 3:
                    banco.listarContas();
                    break;
                case 4:
                    realizarDeposito();
                    break;
                case 5:
                    realizarSaque();
                    break;
                case 6:
                    realizarTransferencia();
                    break;
                case 7:
                    renderJurosPoupanca();
                    break;
                case 8:
                    exibirInformacoesDetalhadas();
                    break;
                case 9:
                    banco.aplicarTaxasMensais();
                    break;
                case 10:
                    executarAcaoEspecifica();
                    break;
                case 11:
                    banco.exibirEstatisticas();
                    break;
                case 0:
                    System.out.println("Saindo do sistema bancário...");
                    break;
                default:
                    System.out.println("Opção inválida!");
            }
        } while (opcao != 0);
        
        scanner.close();
    }
    
    /**
     * Adiciona algumas contas de exemplo para demonstração
     */
    private static void adicionarContasExemplo() {
        // POLIMORFISMO: podemos tratar ContaCorrente e ContaPoupanca como ContaBancaria
        ContaBancaria cc1 = new ContaCorrente("001", 1500.0, "João Silva", "0001", 2.5, 1000.0, 2);
        ContaBancaria cc2 = new ContaCorrente("002", 500.0, "Maria Santos", "0001", 2.5, 500.0, 5);
        ContaBancaria cp1 = new ContaPoupanca("101", 3000.0, "Carlos Oliveira", "0001", 15);
        ContaBancaria cp2 = new ContaPoupanca("102", 2000.0, "Ana Costa", "0001", 5);
        
        banco.adicionarConta(cc1);
        banco.adicionarConta(cc2);
        banco.adicionarConta(cp1);
        banco.adicionarConta(cp2);
    }
    
    private static void exibirMenu() {
        System.out.println("\n=== MENU PRINCIPAL ===");
        System.out.println("1. Cadastrar Conta Corrente");
        System.out.println("2. Cadastrar Conta Poupança");
        System.out.println("3. Listar Todas as Contas");
        System.out.println("4. Realizar Depósito");
        System.out.println("5. Realizar Saque");
        System.out.println("6. Realizar Transferência");
        System.out.println("7. Render Juros (Poupança)");
        System.out.println("8. Informações Detalhadas da Conta");
        System.out.println("9. Aplicar Taxas Mensais");
        System.out.println("10. Ações Específicas");
        System.out.println("11. Estatísticas do Banco");
        System.out.println("0. Sair");
    }
    
    private static void cadastrarContaCorrente() {
        System.out.println("\n--- CADASTRAR CONTA CORRENTE ---");
        ContaCorrente cc = new ContaCorrente();
        
        System.out.print("Número da conta: ");
        cc.setNumero(scanner.nextLine());
        
        System.out.print("Titular: ");
        cc.setTitular(scanner.nextLine());
        
        System.out.print("Agência: ");
        cc.setAgencia(scanner.nextLine());
        
        System.out.print("Saldo inicial: R$ ");
        cc.setSaldo(scanner.nextDouble());
        
        System.out.print("Taxa de saque: R$ ");
        cc.setTaxaSaque(scanner.nextDouble());
        
        System.out.print("Limite do cheque especial: R$ ");
        cc.setChequeEspecial(scanner.nextDouble());
        
        System.out.print("Número de transações isentas: ");
        cc.setTransacoesIsentas(scanner.nextInt());
        scanner.nextLine(); // Limpar buffer
        
        banco.adicionarConta(cc);
    }
    
    private static void cadastrarContaPoupanca() {
        System.out.println("\n--- CADASTRAR CONTA POUPANÇA ---");
        ContaPoupanca cp = new ContaPoupanca();
        
        System.out.print("Número da conta: ");
        cp.setNumero(scanner.nextLine());
        
        System.out.print("Titular: ");
        cp.setTitular(scanner.nextLine());
        
        System.out.print("Agência: ");
        cp.setAgencia(scanner.nextLine());
        
        System.out.print("Saldo inicial: R$ ");
        cp.setSaldo(scanner.nextDouble());
        
        System.out.print("Dia do aniversário: ");
        cp.setDiaAniversario(scanner.nextInt());
        scanner.nextLine(); // Limpar buffer
        
        banco.adicionarConta(cp);
    }
    
    private static void realizarDeposito() {
        banco.listarContas();
        if (!banco.getContas().isEmpty()) {
            int index = lerInteiro("Digite o número da conta: ") - 1;
            if (index >= 0 && index < banco.getContas().size()) {
                System.out.print("Valor do depósito: R$ ");
                double valor = scanner.nextDouble();
                scanner.nextLine(); // Limpar buffer
                
                ContaBancaria conta = banco.getContas().get(index);
                conta.depositar(valor);
            } else {
                System.out.println("Índice inválido!");
            }
        }
    }
    
    private static void realizarSaque() {
        banco.listarContas();
        if (!banco.getContas().isEmpty()) {
            int index = lerInteiro("Digite o número da conta: ") - 1;
            if (index >= 0 && index < banco.getContas().size()) {
                System.out.print("Valor do saque: R$ ");
                double valor = scanner.nextDouble();
                scanner.nextLine(); // Limpar buffer
                
                ContaBancaria conta = banco.getContas().get(index);
                conta.sacar(valor);
            } else {
                System.out.println("Índice inválido!");
            }
        }
    }
    
    private static void realizarTransferencia() {
        banco.listarContas();
        if (banco.getContas().size() >= 2) {
            int indexOrigem = lerInteiro("Digite o número da conta de origem: ") - 1;
            int indexDestino = lerInteiro("Digite o número da conta de destino: ") - 1;
            
            if (indexOrigem >= 0 && indexOrigem < banco.getContas().size() &&
                indexDestino >= 0 && indexDestino < banco.getContas().size()) {
                
                System.out.print("Valor da transferência: R$ ");
                double valor = scanner.nextDouble();
                scanner.nextLine(); // Limpar buffer
                
                ContaBancaria origem = banco.getContas().get(indexOrigem);
                ContaBancaria destino = banco.getContas().get(indexDestino);
                
                origem.transferir(valor, destino);
            } else {
                System.out.println("Índices inválidos!");
            }
        } else {
            System.out.println("É necessário ter pelo menos 2 contas para transferência.");
        }
    }
    
    private static void renderJurosPoupanca() {
        // Lista apenas contas poupança
        List<ContaBancaria> contas = banco.getContas();
        boolean encontrouPoupanca = false;
        
        for (int i = 0; i < contas.size(); i++) {
            if (contas.get(i) instanceof ContaPoupanca) {
                System.out.println((i + 1) + ". " + contas.get(i));
                encontrouPoupanca = true;
            }
        }
        
        if (!encontrouPoupanca) {
            System.out.println("Nenhuma conta poupança encontrada.");
            return;
        }
        
        int index = lerInteiro("Digite o número da conta poupança: ") - 1;
        if (index >= 0 && index < contas.size() && contas.get(index) instanceof ContaPoupanca) {
            System.out.print("Taxa de juros (%): ");
            double taxa = scanner.nextDouble();
            scanner.nextLine(); // Limpar buffer
            
            ContaPoupanca poupanca = (ContaPoupanca) contas.get(index);
            poupanca.renderJuros(taxa);
        } else {
            System.out.println("Índice inválido ou não é uma conta poupança!");
        }
    }
    
    private static void exibirInformacoesDetalhadas() {
        banco.listarContas();
        if (!banco.getContas().isEmpty()) {
            int index = lerInteiro("Digite o número da conta: ") - 1;
            banco.exibirInformacoesConta(index);
        }
    }
    
    private static void executarAcaoEspecifica() {
        banco.listarContas();
        if (!banco.getContas().isEmpty()) {
            int index = lerInteiro("Digite o número da conta: ") - 1;
            ContaBancaria conta = banco.getContas().get(index);
            
            // POLIMORFISMO - comportamento diferente baseado no tipo real
            if (conta instanceof ContaCorrente) {
                ContaCorrente cc = (ContaCorrente) conta;
                cc.pagarChequeEspecial();
            } else if (conta instanceof ContaPoupanca) {
                ContaPoupanca cp = (ContaPoupanca) conta;
                System.out.print("Taxa de juros para simulação (%): ");
                double taxa = scanner.nextDouble();
                System.out.print("Período em meses: ");
                int meses = scanner.nextInt();
                scanner.nextLine(); // Limpar buffer
                cp.simularRendimento(taxa, meses);
            }
        }
    }
    
    private static int lerInteiro(String mensagem) {
        while (true) {
            try {
                System.out.print(mensagem);
                return Integer.parseInt(scanner.nextLine());
            } catch (NumberFormatException e) {
                System.out.println("Por favor, digite um número válido.");
            }
        }
    }
}
