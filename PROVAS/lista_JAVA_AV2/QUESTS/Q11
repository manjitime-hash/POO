import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

/**
 * CLASSE ABSTRATA ANIMAL
 * Classe base que define a estrutura comum para todos os animais
 */
abstract class Animal {
    // a) ATRIBUTOS PROTEGIDOS
    protected String nome;
    protected int idade;
    protected double peso;
    protected String habitat;
    
    // CONSTRUTOR
    public Animal(String nome, int idade, double peso, String habitat) {
        this.nome = nome;
        this.idade = idade;
        this.peso = peso;
        this.habitat = habitat;
    }
    
    // CONSTRUTOR VAZIO
    public Animal() {}
    
    // b) M√âTODOS DE ACESSO (GETTERS/SETTERS)
    public String getNome() {
        return nome;
    }
    
    public void setNome(String nome) {
        this.nome = nome;
    }
    
    public int getIdade() {
        return idade;
    }
    
    public void setIdade(int idade) {
        this.idade = idade;
    }
    
    public double getPeso() {
        return peso;
    }
    
    public void setPeso(double peso) {
        this.peso = peso;
    }
    
    public String getHabitat() {
        return habitat;
    }
    
    public void setHabitat(String habitat) {
        this.habitat = habitat;
    }
    
    // c) M√âTODO ABSTRATO emitirSom()
    public abstract void emitirSom();
    
    // M√âTODOS ABSTRATOS ADICIONAIS PARA DEMONSTRAR POLIMORFISMO
    public abstract String getTipo();
    public abstract void movimentar();
    public abstract String getAlimentacao();
    
    // M√âTODO CONCRETO COM COMPORTAMENTO QUE PODE SER SOBRESCRITO
    public void dormir() {
        System.out.println(nome + " est√° dormindo... Zzz");
    }
    
    // M√âTODO PARA EXIBIR INFORMA√á√ïES DO ANIMAL
    public void exibirInformacoes() {
        System.out.println("Nome: " + nome);
        System.out.println("Tipo: " + getTipo());
        System.out.println("Idade: " + idade + " anos");
        System.out.println("Peso: " + peso + " kg");
        System.out.println("Habitat: " + habitat);
        System.out.println("Alimenta√ß√£o: " + getAlimentacao());
    }
    
    @Override
    public String toString() {
        return getTipo() + ": " + nome + " (" + idade + " anos)";
    }
}

/**
 * CLASSE CACHORRO - Item d
 * Implementa o m√©todo emitirSom() espec√≠fico para cachorros
 */
class Cachorro extends Animal {
    private String raca;
    private boolean treinado;
    
    // CONSTRUTOR
    public Cachorro(String nome, int idade, double peso, String habitat, String raca, boolean treinado) {
        super(nome, idade, peso, habitat);
        this.raca = raca;
        this.treinado = treinado;
    }
    
    // CONSTRUTOR VAZIO
    public Cachorro() {}
    
    // GETTERS E SETTERS ESPEC√çFICOS
    public String getRaca() {
        return raca;
    }
    
    public void setRaca(String raca) {
        this.raca = raca;
    }
    
    public boolean isTreinado() {
        return treinado;
    }
    
    public void setTreinado(boolean treinado) {
        this.treinado = treinado;
    }
    
    // d) IMPLEMENTA√á√ÉO DO M√âTODO ABSTRATO emitirSom()
    @Override
    public void emitirSom() {
        System.out.println(nome + " diz: Au Au! üêï");
    }
    
    // IMPLEMENTA√á√ÉO DOS M√âTODOS ABSTRATOS
    @Override
    public String getTipo() {
        return "Cachorro";
    }
    
    @Override
    public void movimentar() {
        System.out.println(nome + " est√° correndo e balan√ßando o rabo!");
    }
    
    @Override
    public String getAlimentacao() {
        return "Ra√ß√£o para c√£es, carne e ossos";
    }
    
    // M√âTODO ESPEC√çFICO DA CLASSE CACHORRO
    public void buscarOsso() {
        System.out.println(nome + " est√° procurando um osso para roer!");
    }
    
    // SOBRESCRITA DO M√âTODO exibirInformacoes()
    @Override
    public void exibirInformacoes() {
        super.exibirInformacoes();
        System.out.println("Ra√ßa: " + raca);
        System.out.println("Treinado: " + (treinado ? "Sim" : "N√£o"));
    }
}

/**
 * CLASSE GATO - Item d
 * Implementa o m√©todo emitirSom() espec√≠fico para gatos
 */
class Gato extends Animal {
    private String corPelo;
    private boolean castrado;
    
    // CONSTRUTOR
    public Gato(String nome, int idade, double peso, String habitat, String corPelo, boolean castrado) {
        super(nome, idade, peso, habitat);
        this.corPelo = corPelo;
        this.castrado = castrado;
    }
    
    // CONSTRUTOR VAZIO
    public Gato() {}
    
    // GETTERS E SETTERS ESPEC√çFICOS
    public String getCorPelo() {
        return corPelo;
    }
    
    public void setCorPelo(String corPelo) {
        this.corPelo = corPelo;
    }
    
    public boolean isCastrado() {
        return castrado;
    }
    
    public void setCastrado(boolean castrado) {
        this.castrado = castrado;
    }
    
    // d) IMPLEMENTA√á√ÉO DO M√âTODO ABSTRATO emitirSom()
    @Override
    public void emitirSom() {
        System.out.println(nome + " diz: Miau! üêà");
    }
    
    // IMPLEMENTA√á√ÉO DOS M√âTODOS ABSTRATOS
    @Override
    public String getTipo() {
        return "Gato";
    }
    
    @Override
    public void movimentar() {
        System.out.println(nome + " est√° se movendo silenciosamente...");
    }
    
    @Override
    public String getAlimentacao() {
        return "Ra√ß√£o para gatos, peixe e frango";
    }
    
    // M√âTODO ESPEC√çFICO DA CLASSE GATO
    public void arranharMoveis() {
        System.out.println(nome + " est√° afiando as unhas no sof√°! üòº");
    }
    
    // SOBRESCRITA DO M√âTODO dormir()
    @Override
    public void dormir() {
        System.out.println(nome + " est√° ronronando enquanto dorme... Purrr üí§");
    }
    
    // SOBRESCRITA DO M√âTODO exibirInformacoes()
    @Override
    public void exibirInformacoes() {
        super.exibirInformacoes();
        System.out.println("Cor do pelo: " + corPelo);
        System.out.println("Castrado: " + (castrado ? "Sim" : "N√£o"));
    }
}

/**
 * NOVA CLASSE: LE√ÉO
 * Demonstra a extensibilidade do sistema
 */
class Leao extends Animal {
    private double tamanhoJuba;
    private boolean alpha;
    
    // CONSTRUTOR
    public Leao(String nome, int idade, double peso, String habitat, double tamanhoJuba, boolean alpha) {
        super(nome, idade, peso, habitat);
        this.tamanhoJuba = tamanhoJuba;
        this.alpha = alpha;
    }
    
    // CONSTRUTOR VAZIO
    public Leao() {}
    
    // GETTERS E SETTERS ESPEC√çFICOS
    public double getTamanhoJuba() {
        return tamanhoJuba;
    }
    
    public void setTamanhoJuba(double tamanhoJuba) {
        this.tamanhoJuba = tamanhoJuba;
    }
    
    public boolean isAlpha() {
        return alpha;
    }
    
    public void setAlpha(boolean alpha) {
        this.alpha = alpha;
    }
    
    // IMPLEMENTA√á√ÉO DO M√âTODO ABSTRATO emitirSom()
    @Override
    public void emitirSom() {
        System.out.println(nome + " ruge: ROAR! ü¶Å");
    }
    
    // IMPLEMENTA√á√ÉO DOS M√âTODOS ABSTRATOS
    @Override
    public String getTipo() {
        return "Le√£o";
    }
    
    @Override
    public void movimentar() {
        System.out.println(nome + " est√° patrulhando seu territ√≥rio majestosamente!");
    }
    
    @Override
    public String getAlimentacao() {
        return "Carne (grandes mam√≠feros)";
    }
    
    // M√âTODO ESPEC√çFICO DA CLASSE LE√ÉO
    public void rugirFortemente() {
        System.out.println(nome + " solta um rugido que ecoa por toda a savana! üîä");
    }
    
    // SOBRESCRITA DO M√âTODO exibirInformacoes()
    @Override
    public void exibirInformacoes() {
        super.exibirInformacoes();
        System.out.println("Tamanho da juba: " + tamanhoJuba + " cm");
        System.out.println("Alpha: " + (alpha ? "Sim" : "N√£o"));
    }
}

/**
 * CLASSE ZOOLOGICO
 * Gerencia a cole√ß√£o de animais e demonstra polimorfismo
 */
class Zoologico {
    // e) LISTA PARA ARMAZENAR DIFERENTES ANIMAIS (POLIMORFISMO)
    private List<Animal> animais;
    
    public Zoologico() {
        this.animais = new ArrayList<>();
    }
    
    /**
     * Adiciona um animal √† lista (POLIMORFISMO)
     * Aceita qualquer subclasse de Animal
     */
    public void adicionarAnimal(Animal animal) {
        animais.add(animal);
        System.out.println(animal.getTipo() + " '" + animal.getNome() + "' adicionado ao zool√≥gico!");
    }
    
    /**
     * Faz todos os animais emitirem sons (DEMONSTRA POLIMORFISMO)
     */
    public void fazerBarulho() {
        System.out.println("\n=== CONCERTO ANIMAL DO ZOOL√ìGICO ===");
        for (Animal animal : animais) {
            animal.emitirSom(); // POLIMORFISMO: comportamento diferente para cada tipo
        }
    }
    
    /**
     * Mostra informa√ß√µes de todos os animais
     */
    public void listarAnimais() {
        System.out.println("\n=== ANIMAIS DO ZOOL√ìGICO ===");
        if (animais.isEmpty()) {
            System.out.println("O zool√≥gico est√° vazio.");
            return;
        }
        
        for (int i = 0; i < animais.size(); i++) {
            System.out.println((i + 1) + ". " + animais.get(i));
        }
    }
    
    /**
     * Exibe informa√ß√µes detalhadas de um animal espec√≠fico
     */
    public void exibirInformacoesAnimal(int index) {
        if (index >= 0 && index < animais.size()) {
            Animal animal = animais.get(index);
            System.out.println("\n--- INFORMA√á√ïES DETALHADAS ---");
            animal.exibirInformacoes();
        } else {
            System.out.println("√çndice inv√°lido!");
        }
    }
    
    /**
     * Faz todos os animais se movimentarem
     */
    public void observarMovimentacao() {
        System.out.println("\n=== OBSERVANDO A MOVIMENTA√á√ÉO ===");
        for (Animal animal : animais) {
            animal.movimentar(); // POLIMORFISMO
        }
    }
    
    /**
     * Faz todos os animais dormirem
     */
    public void horaDormir() {
        System.out.println("\n=== HORA DE DORMIR ===");
        for (Animal animal : animais) {
            animal.dormir(); // POLIMORFISMO (alguns podem sobrescrever este m√©todo)
        }
    }
    
    /**
     * Executa a√ß√£o espec√≠fica baseada no tipo real do animal
     */
    public void executarAcaoEspecifica(int index) {
        if (index >= 0 && index < animais.size()) {
            Animal animal = animais.get(index);
            
            // POLIMORFISMO - comportamento diferente baseado no tipo real
            if (animal instanceof Cachorro) {
                Cachorro cachorro = (Cachorro) animal;
                cachorro.buscarOsso();
            } else if (animal instanceof Gato) {
                Gato gato = (Gato) animal;
                gato.arranharMoveis();
            } else if (animal instanceof Leao) {
                Leao leao = (Leao) animal;
                leao.rugirFortemente();
            }
        } else {
            System.out.println("√çndice inv√°lido!");
        }
    }
    
    /**
     * Estat√≠sticas do zool√≥gico
     */
    public void exibirEstatisticas() {
        System.out.println("\n=== ESTAT√çSTICAS DO ZOOL√ìGICO ===");
        int totalAnimais = animais.size();
        int cachorros = 0;
        int gatos = 0;
        int leoes = 0;
        double pesoTotal = 0;
        
        for (Animal animal : animais) {
            pesoTotal += animal.getPeso();
            if (animal instanceof Cachorro) cachorros++;
            else if (animal instanceof Gato) gatos++;
            else if (animal instanceof Leao) leoes++;
        }
        
        System.out.println("Total de animais: " + totalAnimais);
        System.out.println("Cachorros: " + cachorros);
        System.out.println("Gatos: " + gatos);
        System.out.println("Le√µes: " + leoes);
        System.out.printf("Peso total: %.1f kg\n", pesoTotal);
        
        if (totalAnimais > 0) {
            System.out.printf("Peso m√©dio: %.1f kg\n", pesoTotal / totalAnimais);
        }
    }
    
    // GETTER para a lista de animais
    public List<Animal> getAnimais() {
        return animais;
    }
}

/**
 * CLASSE PRINCIPAL MAIN
 */
public class Main {
    private static Scanner scanner = new Scanner(System.in);
    private static Zoologico zoologico = new Zoologico();
    
    public static void main(String[] args) {
        System.out.println("=== ZOOL√ìGICO DIGITAL ===");
        
        // Adiciona alguns animais de exemplo
        adicionarAnimaisExemplo();
        
        int opcao;
        do {
            exibirMenu();
            opcao = lerInteiro("Escolha uma op√ß√£o: ");
            
            switch (opcao) {
                case 1:
                    cadastrarCachorro();
                    break;
                case 2:
                    cadastrarGato();
                    break;
                case 3:
                    cadastrarLeao();
                    break;
                case 4:
                    zoologico.listarAnimais();
                    break;
                case 5:
                    zoologico.fazerBarulho();
                    break;
                case 6:
                    observarMovimentacao();
                    break;
                case 7:
                    executarAcaoEspecifica();
                    break;
                case 8:
                    exibirInformacoesDetalhadas();
                    break;
                case 9:
                    zoologico.horaDormir();
                    break;
                case 10:
                    zoologico.exibirEstatisticas();
                    break;
                case 0:
                    System.out.println("Saindo do zool√≥gico...");
                    break;
                default:
                    System.out.println("Op√ß√£o inv√°lida!");
            }
        } while (opcao != 0);
        
        scanner.close();
    }
    
    /**
     * Adiciona alguns animais de exemplo para demonstra√ß√£o
     */
    private static void adicionarAnimaisExemplo() {
        // POLIMORFISMO: podemos tratar Cachorro, Gato e Le√£o como Animal
        Animal cachorro1 = new Cachorro("Rex", 3, 25.5, "Dom√©stico", "Pastor Alem√£o", true);
        Animal cachorro2 = new Cachorro("Luna", 2, 8.2, "Dom√©stico", "Poodle", false);
        Animal gato1 = new Gato("Mimi", 4, 4.5, "Dom√©stico", "Cinza", true);
        Animal gato2 = new Gato("Thor", 1, 5.8, "Dom√©stico", "Laranja", false);
        Animal leao1 = new Leao("Simba", 5, 190.0, "Savana", 45.0, true);
        
        zoologico.adicionarAnimal(cachorro1);
        zoologico.adicionarAnimal(cachorro2);
        zoologico.adicionarAnimal(gato1);
        zoologico.adicionarAnimal(gato2);
        zoologico.adicionarAnimal(leao1);
    }
    
    private static void exibirMenu() {
        System.out.println("\n=== MENU PRINCIPAL ===");
        System.out.println("1. Cadastrar Cachorro");
        System.out.println("2. Cadastrar Gato");
        System.out.println("3. Cadastrar Le√£o");
        System.out.println("4. Listar Animais");
        System.out.println("5. Ouvir Sons dos Animais");
        System.out.println("6. Observar Movimenta√ß√£o");
        System.out.println("7. Executar A√ß√£o Espec√≠fica");
        System.out.println("8. Informa√ß√µes Detalhadas");
        System.out.println("9. Hora de Dormir");
        System.out.println("10. Estat√≠sticas do Zool√≥gico");
        System.out.println("0. Sair");
    }
    
    private static void cadastrarCachorro() {
        System.out.println("\n--- CADASTRAR CACHORRO ---");
        Cachorro cachorro = new Cachorro();
        
        System.out.print("Nome: ");
        cachorro.setNome(scanner.nextLine());
        
        System.out.print("Idade: ");
        cachorro.setIdade(scanner.nextInt());
        
        System.out.print("Peso (kg): ");
        cachorro.setPeso(scanner.nextDouble());
        scanner.nextLine(); // Limpar buffer
        
        System.out.print("Habitat: ");
        cachorro.setHabitat(scanner.nextLine());
        
        System.out.print("Ra√ßa: ");
        cachorro.setRaca(scanner.nextLine());
        
        System.out.print("Treinado (1-Sim/0-N√£o): ");
        cachorro.setTreinado(scanner.nextInt() == 1);
        scanner.nextLine(); // Limpar buffer
        
        zoologico.adicionarAnimal(cachorro);
    }
    
    private static void cadastrarGato() {
        System.out.println("\n--- CADASTRAR GATO ---");
        Gato gato = new Gato();
        
        System.out.print("Nome: ");
        gato.setNome(scanner.nextLine());
        
        System.out.print("Idade: ");
        gato.setIdade(scanner.nextInt());
        
        System.out.print("Peso (kg): ");
        gato.setPeso(scanner.nextDouble());
        scanner.nextLine(); // Limpar buffer
        
        System.out.print("Habitat: ");
        gato.setHabitat(scanner.nextLine());
        
        System.out.print("Cor do pelo: ");
        gato.setCorPelo(scanner.nextLine());
        
        System.out.print("Castrado (1-Sim/0-N√£o): ");
        gato.setCastrado(scanner.nextInt() == 1);
        scanner.nextLine(); // Limpar buffer
        
        zoologico.adicionarAnimal(gato);
    }
    
    private static void cadastrarLeao() {
        System.out.println("\n--- CADASTRAR LE√ÉO ---");
        Leao leao = new Leao();
        
        System.out.print("Nome: ");
        leao.setNome(scanner.nextLine());
        
        System.out.print("Idade: ");
        leao.setIdade(scanner.nextInt());
        
        System.out.print("Peso (kg): ");
        leao.setPeso(scanner.nextDouble());
        scanner.nextLine(); // Limpar buffer
        
        System.out.print("Habitat: ");
        leao.setHabitat(scanner.nextLine());
        
        System.out.print("Tamanho da juba (cm): ");
        leao.setTamanhoJuba(scanner.nextDouble());
        
        System.out.print("Alpha (1-Sim/0-N√£o): ");
        leao.setAlpha(scanner.nextInt() == 1);
        scanner.nextLine(); // Limpar buffer
        
        zoologico.adicionarAnimal(leao);
    }
    
    private static void observarMovimentacao() {
        zoologico.observarMovimentacao();
    }
    
    private static void executarAcaoEspecifica() {
        zoologico.listarAnimais();
        if (!zoologico.getAnimais().isEmpty()) {
            int index = lerInteiro("Digite o n√∫mero do animal: ") - 1;
            zoologico.executarAcaoEspecifica(index);
        }
    }
    
    private static void exibirInformacoesDetalhadas() {
        zoologico.listarAnimais();
        if (!zoologico.getAnimais().isEmpty()) {
            int index = lerInteiro("Digite o n√∫mero do animal: ") - 1;
            zoologico.exibirInformacoesAnimal(index);
        }
    }
    
    private static int lerInteiro(String mensagem) {
        while (true) {
            try {
                System.out.print(mensagem);
                return Integer.parseInt(scanner.nextLine());
            } catch (NumberFormatException e) {
                System.out.println("Por favor, digite um n√∫mero v√°lido.");
            }
        }
    }
}
